#!/usr/bin/env node

var fs = require('fs');
var path = require('path');
var findup = require('findup-sync');
var pkginfo = require('pkginfo');
var targz = require('tar.gz');
var request = require('request');
var prompt = require('prompt');
var actions = require('../lib');
var uuid = require("node-uuid");

var program = require('commander');
var colors = require('colors');

program
    .version('0.0.1')
    .option('-c, --config <path>', 'set config path.')
    .option('--host <host>', 'Saskavi deployment host to push to')
    .option('--firebase <url>', 'use the specified firebase to orchestrate RPC calls');

program
    .command('run [module]')
    .description('run the module locally.  module defaults to module found in current directory or parent folders')
    .action(run);

program
    .command('init')
    .description('initialize a new saskavi module')
    .action(init);

program
    .command('deploy [module]')
    .description('deploy module to saskavi service')
    .action(deploy);

program
    .command('kill')
    .description('kills a running saskavi deployment')
    .action(kill);

program.parse(process.argv);



function run(modulePath){
    console.log("saskavi run".bold.green);
    modulePath =  findModulePath(modulePath);

    // make sure we got the right file and teh module resolves
    var moduleFile = require.resolve(modulePath);
    var moduleFileRelative = path.relative(process.cwd(), moduleFile);
    console.log("    exporting functions from".yellow, moduleFileRelative.italic);

    // load package.json to lookup configuration values
    var packageJSON = path.join(modulePath, 'package.json');
    var moduleInfo = JSON.parse(fs.readFileSync(packageJSON));

    var appid = moduleInfo.saskavi;
    if (!appid)
        return console.log("No saskavi configuration found in your package.json, run saskavi init yet?".red);

    console.log("    your app-id:".yellow, appid);

    // require the module, and bind it saskavi style
    var module = require(modulePath);
    actions.bind(appid, module);
}


function deploy(modulePath){
    console.log("saskavi deploy".bold.green);
    modulePath =  findModulePath(modulePath);

    var moduleFile = require.resolve(modulePath);
    var moduleFileRelative = path.relative(process.cwd(), moduleFile);

    var pushHost = program.host
        || process.env["SASKAVI_PUSH_HOST"]
            || "0.saskavi.com";

            actions.push(moduleFileRelative, pushHost);
}

function kill() {
    console.log("saskavi kill".bold.green);

    var pushHost = program.host
        || process.env["SASKAVI_PUSH_HOST"]
            || "0.saskavi.com";

            modulePath = findModulePath();

            var moduleFile = require.resolve(modulePath);
            var moduleFileRelative = path.relative(process.cwd(), moduleFile);

            actions.kill(modulePath, pushHost);
}

function writePackageJson(packageFile) {
    var name = path.basename(path.dirname(packageFile));
    var obj = {
        name: name,
        version: "0.0.1",
        private: true,
        description: "A saskavi powered module",
    }

    fs.writeFileSync(packageFile, JSON.stringify(obj, null, "  "));
}


function init(){
    console.log("saskavi init".bold.green);
    var packageFile = path.join(process.cwd(), "package.json");
    if (!fs.existsSync(packageFile)) {
        console.log("No package.json was found in this directory, generating a fresh one for you.");
        writePackageJson(packageFile);

        var index = path.join(process.cwd(), "index.js");
        if (!fs.existsSync(index)) {
            console.log("Writing a bare-bone index.js");
            fs.writeFileSync(index,
                             "module.exports.hello = function(name, done) {\n" +
                                 "    done(null, 'Hello ' + name + ', welcome to saskavi!');\n" +
                                 "}\n");
        }
    }
    else {
        console.log("Adding saskavi to existing package.json".yellow);
    }

    var pkg = JSON.parse(fs.readFileSync(packageFile));

    var updatePackage = function(withObj) {
        for (var k in withObj) {
            pkg[k] = withObj[k];
        }

        fs.writeFileSync(packageFile, JSON.stringify(pkg, null, "  "));
    };

    console.log("    using module:".yellow, pkg.name);

    if (pkg.saskavi)
        return console.log("Sasakvi already initialized in current directory".red);

    var id = uuid.v4();

    console.log("    your app-id:".yellow, id);

    // check if firebase.json exists here, if it does pull out the firebase property from it
    updatePackage({saskavi: id});
}



function findModulePath(modulePath){
    if (!modulePath) {
        modulePath = path.dirname(findup('package.json'));
    }
    else{
        modulePath = path.resolve(modulePath);
    }
    return modulePath;
}

// vim: set expandtab:
